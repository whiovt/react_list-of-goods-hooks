{"version":3,"sources":["types/SortType.ts","components/GoodsList/GoodsList.tsx","components/Buttons/Buttons.tsx","App.tsx","index.tsx"],"names":["SortType","GoodsList","goods","map","good","Buttons","sortField","sortBy","isReversed","setReverse","className","type","cn","SORT_FIELD_ORDER","onClick","SORT_FIELD_LENGTH","SORT_DEFAULT_STATE","goodsFromServer","App","useState","setSortField","setIsReversed","visablGoods","preparedGoods","sort","good1","good2","localeCompare","reverse","getPreparedGoods","field","ReactDOM","render","document","getElementById"],"mappings":"6KAAYA,E,2DAAAA,K,2BAAAA,E,kCAAAA,E,uBAAAA,M,gBCICC,EAA6B,SAAC,GAEpC,IADLC,EACI,EADJA,MAEA,OACE,6BACGA,EAAMC,KAAI,SAAAC,GAAI,OACb,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,S,gBCCnBC,EAA2B,SAAC,GAKlC,IAJLC,EAII,EAJJA,UACAC,EAGI,EAHJA,OACAC,EAEI,EAFJA,WACAC,EACI,EADJA,WAOA,OACE,sBAAKC,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,iBAAkB,CAChB,WAAYN,IAAcN,EAASa,mBAGvCC,QAAS,kBAAMP,EAAOP,EAASa,mBAPjC,iCAYA,wBACEF,KAAK,SACLD,UAAWE,IAAG,oBAAqB,CACjC,WAAYN,IAAcN,EAASe,oBAErCD,QAAS,kBAAMP,EAAOP,EAASe,oBALjC,4BAUA,wBACEJ,KAAK,SACLD,UAAWE,IAAG,oBAAqB,CAAE,YAAaJ,IAClDM,QAAS,kBAAML,GAAYD,IAH7B,sBAQEF,GAAaE,IACb,wBACEG,KAAK,SACLD,UAAU,4BACVI,QAzCY,WAClBL,GAAW,GACXF,EAAOP,EAASgB,qBAoCZ,uBC9CKC,EAAyB,CACpC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UA2BK,IAAMC,EAAgB,WAC3B,MAAkCC,mBAAS,IAA3C,mBAAOb,EAAP,KAAkBc,EAAlB,KACA,EAAoCD,oBAAS,GAA7C,mBAAOX,EAAP,KAAmBa,EAAnB,KAEMC,EA7BR,SACEpB,EACAI,EACAE,GAEA,IAAMe,EAAa,YAAOrB,GAiB1B,OAfII,GACFiB,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQpB,GACN,KAAKN,EAASe,kBACZ,OAAOU,EAAMnB,GAAaoB,EAAMpB,GAElC,KAAKN,EAASa,iBACZ,OAAOY,EAAME,cAAcD,GAE7B,QACE,OAAO,MAKRlB,EAAae,EAAcK,UAAYL,EAO1BM,CAClBZ,EAAiBX,EAAWE,GAG9B,OACE,sBAAKE,UAAU,kBAAf,UACE,cAAC,EAAD,CACEJ,UAAWA,EACXC,OAAQ,SAACuB,GAAD,OAAmBV,EAAaU,IACxCtB,WAAYA,EACZC,WAAY,SAACmB,GAAD,OAAsBP,EAAcO,MAElD,cAAC,EAAD,CAAW1B,MAAOoB,QC3DxBS,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.e63de54e.chunk.js","sourcesContent":["export enum SortType {\n  SORT_FIELD_LENGTH = 'length',\n  SORT_FIELD_ORDER = 'alphabetically',\n  SORT_DEFAULT_STATE = '',\n}\n","type Props = {\n  goods: string[];\n};\n\nexport const GoodsList: React.FC<Props> = ({\n  goods,\n}) => {\n  return (\n    <ul>\n      {goods.map(good => (\n        <li data-cy=\"Good\" key={good}>{good}</li>\n      ))}\n    </ul>\n  );\n};\n","import cn from 'classnames';\nimport React from 'react';\nimport { SortType } from '../../types/SortType';\n\ntype Props = {\n  sortField: SortType | string,\n  sortBy: (field: SortType | string) => void,\n  isReversed: boolean,\n  setReverse: (field: boolean) => void,\n};\n\nexport const Buttons: React.FC<Props> = ({\n  sortField,\n  sortBy,\n  isReversed,\n  setReverse,\n}) => {\n  const resetCkilck = () => {\n    setReverse(false);\n    sortBy(SortType.SORT_DEFAULT_STATE);\n  };\n\n  return (\n    <div className=\"buttons\">\n      <button\n        type=\"button\"\n        className={cn(\n          'button is-info', {\n            'is-light': sortField !== SortType.SORT_FIELD_ORDER,\n          },\n        )}\n        onClick={() => sortBy(SortType.SORT_FIELD_ORDER)}\n      >\n        Sort alphabetically\n      </button>\n\n      <button\n        type=\"button\"\n        className={cn('button is-success', {\n          'is-light': sortField !== SortType.SORT_FIELD_LENGTH,\n        })}\n        onClick={() => sortBy(SortType.SORT_FIELD_LENGTH)}\n      >\n        Sort by length\n      </button>\n\n      <button\n        type=\"button\"\n        className={cn('button is-warning', { 'is-light': !isReversed })}\n        onClick={() => setReverse(!isReversed)}\n      >\n        Reverse\n      </button>\n\n      {(sortField || isReversed) && (\n        <button\n          type=\"button\"\n          className=\"button is-danger is-light\"\n          onClick={resetCkilck}\n        >\n          Reset\n        </button>\n      )}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport { SortType } from './types/SortType';\nimport { GoodsList } from './components/GoodsList';\nimport { Buttons } from './components/Buttons/Buttons';\n\ntype Goods = string[];\n\nexport const goodsFromServer: Goods = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\nfunction getPreparedGoods(\n  goods: string[],\n  sortField: string,\n  isReversed: boolean,\n): Goods {\n  const preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SortType.SORT_FIELD_LENGTH:\n          return good1[sortField] - good2[sortField];\n\n        case SortType.SORT_FIELD_ORDER:\n          return good1.localeCompare(good2);\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  return isReversed ? preparedGoods.reverse() : preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState('');\n  const [isReversed, setIsReversed] = useState(false);\n\n  const visablGoods = getPreparedGoods(\n    goodsFromServer, sortField, isReversed,\n  );\n\n  return (\n    <div className=\"section content\">\n      <Buttons\n        sortField={sortField}\n        sortBy={(field: string) => setSortField(field)}\n        isReversed={isReversed}\n        setReverse={(reverse: boolean) => setIsReversed(reverse)}\n      />\n      <GoodsList goods={visablGoods} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}